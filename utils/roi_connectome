#!/usr/bin/python3

from hcpsuite import *
import numpy as np

def usage(argv):
  if len(argv) < 5:
    print("\n\n  Usage: {} <list of time series files> <coordinates file> <labels file> <title> [<output dir>]\n".format(os.path.basename(argv[0])))
    exit(1)
  else:
    ts_file = argv[1]
    coords_file = argv[2]
    labels_file = argv[3]
    title = os.path.basename(argv[4])
    if len(argv) == 6:
      output_dir = argv[5]
      if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    elif len(argv) == 5:
      output_dir = make_temp_dir()
    return ts_file, coords_file, labels_file, title, output_dir

ts_file, coords_file, labels_file, title, output_dir = usage(sys.argv)
print("\n\n")
time_series, time_series_files = load_time_series(ts_file)
print("Number of time series loaded: {}\n".format(len(time_series)))
correlation_measure, correlation_matrices = compute_correlations(time_series)
plot_all(correlation_measure.mean_, title, time_series, coords_file, labels_file, output_dir)
#plot_all(correlation_measure.mean_, title, time_series, coords_file, labels_file, output_dir, pconn_dummy='/srv/dev-disk-by-label-Data/home/tobac/Projekte/diss/SCA_Ren_connectome/dummy.pconn.nii')
np.save('/tmp/correlation_measure-mean.npy', correlation_measure.mean_)
save_whole_sample_nifti(correlation_matrices, output_dir, clean=False)
save_whole_sample_nifti(correlation_matrices, output_dir, clean=True)
timer("report")
print("\nResulting files are located in {}\n".format(output_dir))

